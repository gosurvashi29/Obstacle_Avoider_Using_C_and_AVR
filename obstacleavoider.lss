
obstacleavoider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000027e  00000000  00000000  000001bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e8  00000000  00000000  0000043d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000274  00000000  00000000  00000525  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e5  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001e0  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000a81  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 8000000
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  92:	9f ef       	ldi	r25, 0xFF	; 255
  94:	94 bb       	out	0x14, r25	; 20
	DDRC=0xFF;
	DDRA=0b11111100;
  96:	8c ef       	ldi	r24, 0xFC	; 252
  98:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
  9a:	97 bb       	out	0x17, r25	; 23
	while(1)
	{
	PORTB=0xFF;
  9c:	af ef       	ldi	r26, 0xFF	; 255
		if(PINA==00000011)
		{
			PORTB=0b00000000;
			PORTB=0b00000101;
  9e:	75 e0       	ldi	r23, 0x05	; 5
			PORTB=0b00001000;
  a0:	58 e0       	ldi	r21, 0x08	; 8
			PORTB=0b00001010;
  a2:	4a e0       	ldi	r20, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a4:	28 ec       	ldi	r18, 0xC8	; 200
  a6:	30 e0       	ldi	r19, 0x00	; 0
			PORTB=0b00001010;
			_delay_ms(1000);
		}
		if(PINA==0b00000001)
		{
			PORTB=0b00000010;
  a8:	62 e0       	ldi	r22, 0x02	; 2
	DDRC=0xFF;
	DDRA=0b11111100;
	DDRB=0xFF;
	while(1)
	{
	PORTB=0xFF;
  aa:	a8 bb       	out	0x18, r26	; 24
		if(PINA==00000011)
  ac:	89 b3       	in	r24, 0x19	; 25
  ae:	89 30       	cpi	r24, 0x09	; 9
  b0:	59 f4       	brne	.+22     	; 0xc8 <main+0x36>
		{
			PORTB=0b00000000;
  b2:	18 ba       	out	0x18, r1	; 24
			PORTB=0b00000101;
  b4:	78 bb       	out	0x18, r23	; 24
			PORTB=0b00001000;
  b6:	58 bb       	out	0x18, r21	; 24
			PORTB=0b00001010;
  b8:	48 bb       	out	0x18, r20	; 24
  ba:	88 e8       	ldi	r24, 0x88	; 136
  bc:	93 e1       	ldi	r25, 0x13	; 19
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <main+0x2c>
			_delay_ms(500);
		}
		if(PINA==0b00000000)
  c8:	89 b3       	in	r24, 0x19	; 25
  ca:	88 23       	and	r24, r24
  cc:	41 f4       	brne	.+16     	; 0xde <main+0x4c>
		{
			PORTB=0b00001010;
  ce:	48 bb       	out	0x18, r20	; 24
  d0:	80 e1       	ldi	r24, 0x10	; 16
  d2:	97 e2       	ldi	r25, 0x27	; 39
  d4:	f9 01       	movw	r30, r18
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  dc:	d9 f7       	brne	.-10     	; 0xd4 <main+0x42>
			_delay_ms(1000);
		}

		if(PINA==0b00000010)
  de:	89 b3       	in	r24, 0x19	; 25
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	81 f4       	brne	.+32     	; 0x104 <main+0x72>
		{
			PORTB=0b00001000;
  e4:	58 bb       	out	0x18, r21	; 24
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	97 e2       	ldi	r25, 0x27	; 39
  ea:	f9 01       	movw	r30, r18
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f2:	d9 f7       	brne	.-10     	; 0xea <main+0x58>
			_delay_ms(1000);
			PORTB=0b00001010;
  f4:	48 bb       	out	0x18, r20	; 24
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	97 e2       	ldi	r25, 0x27	; 39
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 100:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 102:	d9 f7       	brne	.-10     	; 0xfa <main+0x68>
			_delay_ms(1000);
		}
		if(PINA==0b00000001)
 104:	89 b3       	in	r24, 0x19	; 25
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	81 f6       	brne	.-96     	; 0xaa <main+0x18>
		{
			PORTB=0b00000010;
 10a:	68 bb       	out	0x18, r22	; 24
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	97 e2       	ldi	r25, 0x27	; 39
 110:	f9 01       	movw	r30, r18
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 116:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	d9 f7       	brne	.-10     	; 0x110 <main+0x7e>
			_delay_ms(1000);
			PORTB=0b00001010;
 11a:	48 bb       	out	0x18, r20	; 24
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	97 e2       	ldi	r25, 0x27	; 39
 120:	f9 01       	movw	r30, r18
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 126:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	d9 f7       	brne	.-10     	; 0x120 <main+0x8e>
 12a:	bf cf       	rjmp	.-130    	; 0xaa <main+0x18>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
